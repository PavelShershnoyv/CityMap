// <auto-generated />
using System;
using InteractiveMap.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InteractiveMap.Infrastructure.Migrations.Map
{
    [DbContext(typeof(MapContext))]
    [Migration("20220607131005_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.5");

            modelBuilder.Entity("InteractiveMap.Core.Entities.MapLayer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("MapLayers", (string)null);
                });

            modelBuilder.Entity("InteractiveMap.Core.Entities.Mark", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("MapLayerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UserMapLayerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MapLayerId");

                    b.HasIndex("UserMapLayerId");

                    b.ToTable("Marks", (string)null);
                });

            modelBuilder.Entity("InteractiveMap.Core.Entities.MarkImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("MarkId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UserMarkId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MarkId");

                    b.HasIndex("UserMarkId");

                    b.ToTable("MarkImages");
                });

            modelBuilder.Entity("InteractiveMap.Core.Entities.UserMapLayer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("UserMapLayers", (string)null);
                });

            modelBuilder.Entity("InteractiveMap.Core.Entities.UserMark", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("MapLayerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("UserMarks", (string)null);
                });

            modelBuilder.Entity("InteractiveMap.Core.Entities.Mark", b =>
                {
                    b.HasOne("InteractiveMap.Core.Entities.MapLayer", null)
                        .WithMany("Marks")
                        .HasForeignKey("MapLayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InteractiveMap.Core.Entities.UserMapLayer", null)
                        .WithMany("Marks")
                        .HasForeignKey("UserMapLayerId");

                    b.OwnsOne("InteractiveMap.Core.ValueObjects.Position", "Position", b1 =>
                        {
                            b1.Property<int>("MarkId")
                                .HasColumnType("INTEGER");

                            b1.Property<double>("Latitude")
                                .HasColumnType("REAL");

                            b1.Property<double>("Longitude")
                                .HasColumnType("REAL");

                            b1.HasKey("MarkId");

                            b1.ToTable("Marks");

                            b1.WithOwner()
                                .HasForeignKey("MarkId");
                        });

                    b.Navigation("Position");
                });

            modelBuilder.Entity("InteractiveMap.Core.Entities.MarkImage", b =>
                {
                    b.HasOne("InteractiveMap.Core.Entities.Mark", null)
                        .WithMany("Images")
                        .HasForeignKey("MarkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InteractiveMap.Core.Entities.UserMark", null)
                        .WithMany("Images")
                        .HasForeignKey("UserMarkId");
                });

            modelBuilder.Entity("InteractiveMap.Core.Entities.UserMark", b =>
                {
                    b.OwnsOne("InteractiveMap.Core.ValueObjects.Position", "Position", b1 =>
                        {
                            b1.Property<int>("UserMarkId")
                                .HasColumnType("INTEGER");

                            b1.Property<double>("Latitude")
                                .HasColumnType("REAL");

                            b1.Property<double>("Longitude")
                                .HasColumnType("REAL");

                            b1.HasKey("UserMarkId");

                            b1.ToTable("UserMarks");

                            b1.WithOwner()
                                .HasForeignKey("UserMarkId");
                        });

                    b.Navigation("Position");
                });

            modelBuilder.Entity("InteractiveMap.Core.Entities.MapLayer", b =>
                {
                    b.Navigation("Marks");
                });

            modelBuilder.Entity("InteractiveMap.Core.Entities.Mark", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("InteractiveMap.Core.Entities.UserMapLayer", b =>
                {
                    b.Navigation("Marks");
                });

            modelBuilder.Entity("InteractiveMap.Core.Entities.UserMark", b =>
                {
                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
